<?php

function pr($data){
    echo '<pre>',print_r($data,1),'</pre>';
}

function bp(){
	return base_path() . drupal_get_path('theme','ecotron');
}
/**
 * verifica a existencia de um parâmetro na URL
 * @text [string] $param a string que se quer verificar
 * @return [boolean]
 */
function in_url($text){
	return preg_match('/('.urlfy($text).')/i',$_SERVER['QUERY_STRING']);
}

function sanitize($string){
	$patterns = array('/ã|á|à|â/i','/é|ê/i','/í/i','/ô|õ|ó/i','/ú|ü/i','/ç/i','/\s/');
	$replaces = array('a','e','i','o','u','c','-');
	return preg_replace($patterns,$replaces,$string);
}

function urlfy($string){
	return sanitize(strtolower($string));
}
/**
 * alias from base_path . drupal_get_path('theme','frontec');
 */
function gp($theme){
	return base_path() . drupal_get_path('theme',$theme);
}
/**
 * create array with params
 * @param [mixed] elements
 */
function a(){
	return func_get_args();
}
/**
 * create a associtive array (hash) with params where param odd is a key em param even is a value
 * exemple:
 * 			$a = aa('my', 1); returns array('my' => 1)
 * @params [mixed]
 */
function aa(){
	$ks = $vs = array();
	foreach(func_get_args() as $i => $v) if($i % 2) $vs[] = $v; else $ks[] = $v;
	if(count($ks) > count($vs)) array_push($vs,'');
	return array_combine($ks,$vs);
}

function ie($version=false){
    $browser = $_SERVER['HTTP_USER_AGENT'];
    $comparsion = ($version)? 'MSIE '. $version : 'MSIE';
    return strstr($browser,$comparsion);
}
/* altera o maxlenght do title no caso a mensagem para o medico */
function customx_form_alter($form_id, &$form){
    if($form_id['#node']->type == 'mensagem'){
       $form['title'] = array('#type' => 'textfield','#maxlength' => 3);
    }
}

function in_http_referer($text){
	$text = preg_replace('/\//','\/',urlfy($text)); // for full paths
	return preg_match('/('.$text.')/i',$_SERVER['HTTP_REFERER']);
}

